Preparando proyecto
1 - Crear clase Startup y configurarla
2 - Crear clase Startup y configurarla 
3 - Desactivar tipos de referencia no nulos
4 - Eliminar el weatherForest del controller y del proyecto
5 - Hacer rebuild del solution.

Creacion, migracion y actualizacion de BD
1 - Instalar paquetes de ORM:
	EntityFrameworkCore.SqlServer
	EntityFrameworkTools
2 - Crear clase ApplicationDbContext la cual hereda de DbContext.
3 - En appsetting.json en las DevelopmentSetting.json colocar por default connexion para la Bd local.
4 - Crear entidades, en ellas se pueden hacer validaciones con IValidatableObject.
5 - En la clase ApplicationDbContext registrar la nueva entidad
6 - Agregar en clase Startup services.AddDbContext<ApplicationDbContext>...
7 - Tools -> Nuget console 
							Drop-Database
							Add-Migration nameMigration
							Update-Database

Validar Modelo o DTO 
1 - Crear carpeta validaciones
2 - Crear clase validadora hereda de ValidationAttribute
3 - Agregar en forma de decorador a la entidad o al DTO

Controller
1 - Crear controller, heredar de Controllerbase
2 - Colocar decorador [ApiController]
					  [Route("api/v1/direction")]


Middleware
1 - Crear clase
2 - Registrar en clase Startup con app.UseMiddleware<>

Filtro
1 - Crear clase y heredar de IAsyncActionFilter
2 - Registrar en clase Startup en ConfigureService services.AddScope<FiltroName>
3 - Colocar en ruta deseada [ServiceFilter(typeof(filtroName))]

Muchos-Muchos
1 - Crear ambas entidades
2 - En startup al services.AddControllers() agregar AddJsonOptions(Confifure =>...)
3 - Crear controller

Dto Manual
1 - Crear carpeta DTO
2 - Crear archivo
3 - Convertir manualmente el DTO a la entidad.


En OnModelCreating en ApplicationDbContext se puede abordar mas de las relaciones entre tablas
- Definicion de DbSet

Impresion en consola
1 - En el constructor recibimos como parametro ILogger<NombreController>
2 - Agregar como atributo
3 - Logger-LogInformation("mensaje") puede ser LogCritical, error, warning, information, debug y trace.
4 - Se puede cambiar el nivel de impresion en appSettingjso -> appsetting.development.json loglevel
5 -  puede agregar niveles para que no se muestren todos.

DTO con AutoMapper

1 - Click derecho sobre la razin del proyecto
2 - Administrar paquete de nugget
3 - Descargar AutoMapper.Extensions.Microsoft.DependencyInjections
4 - En la clase Startup.cs en el metodo COnfigureServices, agregar services.AddAutoMapper(typeof(Startup));
5 - Crear Carpeta Utilidades
6 - Crear clase AutoMapperProfiles que hereda de Profile 
6.2 - Crear Carpeta DTO
6.3 - Crear Carpeta para los DTO de la entidad
6.4 - Crear DTO

........
7 - En constructor de la clase controller, llamar a IMapper mapper
8 - Crear Carpeta DTO y crear una carpeta para tener en orden los DTO que esten asociados
9 - Crear DTO
10 - En el controlador de la clase a usar, agregar en el contructor crear un campo con IMapper.
11 - En la clase AutoMapperProfiles agregar CreateMap
12 - Crear el metodo en el controlador

JWT Autenticacion y Autorizacion:
1 - Colocar variable de entorn oen appsettings.json, con la llave Jwt.
2 - En el administrador de paquetes de Nuget instalar:
							Microsoft.AspNetCore.Authentication.JwtBearer 
							Microsoft.EntityFrameworkCore.Tools
							Newtonsoft.Json
							Swashbuckle.AspNetCore
							Swashbuckle.AspNetCore.Swagger
3 - En archivo Progam.cs agregar: builder.Services.AddAuthentication....
4 - Agregar en Startup en el metodo Configure app.UseAuthentication(); 
5 . En el controlador uqe se desea usar, en el constructor colcoar como parametro IConfiguration configuration
6 - Crear variable jwt para obtener las claves del jwt y sus variables de entorno.
7 - Crear un modelo Jwt.
8 - Crar variable claims para armar la data para nuestro jwt
9 - Crear variable key, singIn, token.
10 - Agregar en clase Program builder.Services.AddSwaggerGen(c =>...)
